#!/usr/bin/env python3
"""
Script para verificar pel√≠culas disponibles en la base de datos
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.mongo_client import mongo_manager

def check_movies():
    """Verificar pel√≠culas disponibles"""
    print("üîç Verificando pel√≠culas disponibles en la base de datos...")
    
    try:
        # Conectar a MongoDB
        if mongo_manager.db is None:
            mongo_manager.connect()
        
        # Contar total de pel√≠culas
        total_movies = mongo_manager.db.movies.count_documents({})
        print(f"üìä Total de pel√≠culas en la base de datos: {total_movies}")
        
        # Obtener algunas pel√≠culas de ejemplo
        sample_movies = list(mongo_manager.db.movies.find().limit(10))
        
        print("\nüé¨ Pel√≠culas de ejemplo:")
        for i, movie in enumerate(sample_movies, 1):
            print(f"  {i}. ID: {movie.get('movieId')} - {movie.get('title', 'Sin t√≠tulo')} ({movie.get('year', 'N/A')})")
        
        # Verificar si existen pel√≠culas con IDs espec√≠ficos
        test_ids = [1, 2, 3, 195619, 278752, 100, 500, 1000]
        print(f"\nüîç Verificando IDs espec√≠ficos:")
        for movie_id in test_ids:
            movie = mongo_manager.db.movies.find_one({'movieId': movie_id})
            if movie:
                print(f"  ‚úÖ ID {movie_id}: {movie.get('title', 'Sin t√≠tulo')}")
            else:
                print(f"  ‚ùå ID {movie_id}: No encontrada")
        
        # Obtener rango de IDs disponibles
        pipeline = [
            {'$group': {
                '_id': None,
                'min_id': {'$min': '$movieId'},
                'max_id': {'$max': '$movieId'},
                'avg_id': {'$avg': '$movieId'}
            }}
        ]
        
        stats = list(mongo_manager.db.movies.aggregate(pipeline))
        if stats:
            stats = stats[0]
            print(f"\nüìà Estad√≠sticas de IDs:")
            print(f"  ID m√≠nimo: {stats.get('min_id')}")
            print(f"  ID m√°ximo: {stats.get('max_id')}")
            print(f"  ID promedio: {stats.get('avg_id'):.0f}")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    check_movies() 